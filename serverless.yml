service: uptimemonitor

custom:
    defaultStage: dev
    environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}
    resourceName: ${self:service}_${self:provider.stage}

provider:
    name: aws
    # local aws profile -- to be removed
    profile: uptimemonitor
    # stage
    stage: ${opt:stage, self:custom.defaultStage}
    runtime: nodejs14.x
    tags:
        project: uptimemonitor
    environment:
        #APP_NAME: ${self:custom.environment.name}
    apiKeys:
        - ${self:service}_${self:provider.stage}_apikey
    logRetentionInDays: 7 # no of days to retain the Lambda logs in CloudWatch

functions:
    # the checker function
    check:
        handler: src/check.handler
        memorySize: 256
        timeout: 30
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
            #SNS_TOPIC: !Ref uptimeMonitorSNSTopic
            SES_TEMPLATE: !Ref emailTemplate
        events:
            #- schedule: cron(0/5 * * * ? *) # every 5 minutes
            - http:
                  path: /check
                  method: POST
                  cors: true
                  private: true

    # settings CRUD
    settings:
        handler: src/settings.handler
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
        events:
            - http:
                  path: /settings
                  method: GET
                  cors: true
                  private: true
            - http:
                  path: /settings
                  method: POST
                  cors: true
                  private: true

    # email recipient validator, can only be triggered directly
    validate:
        handler: src/validate-sender.handler
        environment:
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey

package:
    # exclude files from the package
    exclude:
        - sample-env.yml
        - package.json
        - package-lock.json
        - README.md
        - LICENSE
        - email/**

plugins:
    - serverless-offline

resources: # CloudFormation template syntax
    Resources:
        # the logs table
        ddbTable:
            Type: AWS::DynamoDB::Table
            # DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.resourceName}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: created_at
                      AttributeType: N
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                    - AttributeName: created_at
                      KeyType: RANGE
                # use the On Demand pricing
                BillingMode: PAY_PER_REQUEST
                # autodelete logs after specified time
                TimeToLiveSpecification:
                    AttributeName: expires_at
                    Enabled: TRUE

        # create the IAM user that will be asigned to the policy
        iamUser:
            Type: AWS::IAM::User
            Properties:
                UserName: ${self:custom.resourceName}
                Policies:
                    - PolicyName: ${self:custom.resourceName}_IAM_policy
                      PolicyDocument:
                          Version: "2012-10-17"
                          Statement:
                              - Effect: "Allow"
                                Action:
                                    - "ses:*"
                                    - "dynamodb:*"
                                Resource: "*"

        # create the access keys for the IAM user
        accessKeys:
            Type: AWS::IAM::AccessKey
            Properties:
                UserName: !Ref iamUser

        # create the SES notification template
        emailTemplate:
            Type: AWS::SES::Template
            Properties:
                Template:
                    TemplateName: ${self:custom.resourceName}_email_template
                    SubjectPart: "{{subject}}"
                    TextPart: ${file(email/notification.txt)}
                    HtmlPart: ${file(email/notification.html)}
