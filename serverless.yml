service: diffhub

custom:
    defaultStage: dev
    #environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}
    resourceName: ${self:service}_${self:provider.stage}
    authorizerName: "cognitoAuth"

provider:
    name: aws
    # local aws profile -- to be updated
    profile: uptimemonitor
    # stage
    stage: ${opt:stage, self:custom.defaultStage}
    runtime: nodejs14.x
    lambdaHashingVersion: "20201221"
    tags:
        project: ${self:service}
    environment:
        RESOURCE_PREFIX: ${self:custom.resourceName}
    apiGateway:
        apiKeys:
            - ${self:service}_${self:provider.stage}_apikey
    logRetentionInDays: 7 # no of days to retain the Lambda logs in CloudWatch

functions:
    # trigger test on schedule or manually
    trigger:
        memorySize: 128
        timeout: 30
        handler: src/trigger.handler
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
            # note the normalized function name + LambdaFunction suffix
            LAMBDA_BASIC: { Fn::GetAtt: [RunbasicLambdaFunction, Arn] }
            LAMBDA_BROWSER: { Fn::GetAtt: [RunbrowserLambdaFunction, Arn] }
        events:
            - http:
                  path: /run/{id+}
                  method: GET
                  cors: true
                  private: true
    # run basic test, can only be invoked directly
    runbasic:
        memorySize: 128
        timeout: 60
        handler: src/run.handler
        layers:
            - ${cf:${self:service}-layers-${self:provider.stage}.BrowserLayer}
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
            SES_TEMPLATE: !Ref emailTemplate
    # run browser test, can only be invoked directly
    runbrowser:
        memorySize: 1024
        timeout: 120 # browser tests can take longer
        handler: src/run.handler
        layers:
            - ${cf:${self:service}-layers-${self:provider.stage}.BrowserLayer}
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
            SES_TEMPLATE: !Ref emailTemplate

    # projects CRUD
    projects:
        handler: src/projects.handler
        memorySize: 128
        timeout: 10
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
        events:
            # create
            - http:
                  path: /projects
                  method: POST
                  cors: true
                  private: true
                  #   authorizer:
                  #       arn: !GetAtt userPool.Arn
            # update
            - http:
                  path: /projects/{id+}
                  method: PATCH
                  cors: true
                  private: true
            # list
            - http:
                  path: /projects
                  method: GET
                  cors: true
                  private: true
            # view
            - http:
                  path: /projects/{id+}
                  method: GET
                  cors: true
                  private: true
            # delete
            - http:
                  path: /projects/{id+}
                  method: DELETE
                  cors: true
                  private: true

    # tests CRUD
    tests:
        handler: src/tests.handler
        memorySize: 128
        timeout: 10
        environment:
            DDB_TABLE: !Ref ddbTable
            AWS_KEY: !Ref accessKeys
            AWS_SECRET: !GetAtt accessKeys.SecretAccessKey
            # note the normalized function name + LambdaFunction suffix
            LAMBDA_TRIGGER: { Fn::GetAtt: [TriggerLambdaFunction, Arn] }
        events:
            # create
            - http:
                  path: /tests
                  method: POST
                  cors: true
                  private: true
            # update
            - http:
                  path: /tests/{id+}
                  method: PATCH
                  cors: true
                  private: true
            # list
            - http:
                  path: /tests
                  method: GET
                  cors: true
                  private: true
            # view
            - http:
                  path: /tests/{id+}
                  method: GET
                  cors: true
                  private: true
            # delete
            - http:
                  path: /tests/{id+}
                  method: DELETE
                  cors: true
                  private: true

package:
    # exclude files from the package
    patterns:
        - "!sample-env.yml"
        - "!package.json"
        - "!package-lock.json"
        - "!README.md"
        - "!LICENSE"
        - "!email/**"
        - "!layers/**"

plugins:
    - serverless-offline

resources: # CloudFormation template syntax
    Resources:
        # the logs table
        ddbTable:
            Type: AWS::DynamoDB::Table
            # enable table retention on production use
            # DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.resourceName}
                AttributeDefinitions:
                    - AttributeName: entity
                      AttributeType: S
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: log_pk
                      AttributeType: S
                    - AttributeName: test_pk
                      AttributeType: S
                    - AttributeName: created_at
                      AttributeType: N
                KeySchema:
                    - AttributeName: entity
                      KeyType: HASH
                    - AttributeName: id
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: test_log_created
                      KeySchema:
                          - AttributeName: log_pk
                            KeyType: HASH
                          - AttributeName: created_at
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                    - IndexName: project_test_created
                      KeySchema:
                          - AttributeName: test_pk
                            KeyType: HASH
                          - AttributeName: created_at
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                # use the On Demand pricing
                BillingMode: PAY_PER_REQUEST
                # autodelete logs after specified time
                TimeToLiveSpecification:
                    AttributeName: expires_at
                    Enabled: TRUE

        # create the IAM user that will be asigned to the policy
        iamUser:
            Type: AWS::IAM::User
            Properties:
                UserName: ${self:custom.resourceName}
                Policies:
                    - PolicyName: ${self:custom.resourceName}_IAM_policy
                      PolicyDocument:
                          Version: "2012-10-17"
                          Statement:
                              - Effect: "Allow"
                                Action:
                                    - "ses:*"
                                    - "dynamodb:*"
                                    - "events:*"
                                    - "lambda:*"
                                    - "cognito:*"
                                Resource: "*"

        # create the access keys for the IAM user
        accessKeys:
            Type: AWS::IAM::AccessKey
            Properties:
                UserName: !Ref iamUser

        # create the SES notification template
        emailTemplate:
            Type: AWS::SES::Template
            Properties:
                Template:
                    TemplateName: ${self:custom.resourceName}_email_template
                    SubjectPart: "{{subject}}"
                    TextPart: ${file(email/notification.txt)}
                    HtmlPart: ${file(email/notification.html)}
        # create the cognito user pool
        userPool:
            Type: AWS::Cognito::UserPool
            Properties:
                AdminCreateUserConfig:
                    AllowAdminCreateUserOnly: true
                UsernameAttributes:
                    - email
                UserPoolName: ${self:custom.resourceName}
        # create the cognito pool client
        userPoolClient:
            Type: AWS::Cognito::UserPoolClient
            Properties:
                ClientName: ${self:custom.resourceName}
                GenerateSecret: false
                UserPoolId: !Ref userPool
                ExplicitAuthFlows:
                    - ADMIN_NO_SRP_AUTH
